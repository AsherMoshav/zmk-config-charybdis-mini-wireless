#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
    require-prior-idle-ms = <10>;
};

&mt {
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <250>;
};

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 16>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 18>;
        };

        BrakLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 15>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 19>;
        };

        BraceLeft {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 14>;
        };

        BraceRight {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <9 20>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };
    };

    behaviors {
        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <34>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
  &kp ESC     &kp Q   &kp W   &kp E   &kp R   &kp T                 &kp Y    &kp U    &kp I       &kp O     &kp P      &kp BSPC
  &kp LCTRL   &kp A   &kp S   &kp D   &kp F   &kp G                 &kp H    &kp J    &kp K       &kp L     &kp SEMI   &kp APOS
  &kp LSHFT   &kp Z   &kp X   &kp C   &kp V   &kp B                 &kp N    &kp M    &kp COMMA   &kp DOT   &kp FSLH   &kp LGUI
                      &mo 4   &kp SPACE   &lt 1 TAB                 &mo 2    &Shift_Enter RIGHT_SHIFT ENTER
            >;
        };

        NAV {
            bindings = <
  &trans   &trans     &kp UP       &trans     &trans   &trans       &kp N7   &kp N8  &kp N9   &kp N0   &kp HOME   &kp F1
  &trans   &kp LEFT   &kp DOWN     &kp RIGHT  &trans   &trans       &kp N4   &kp N5  &kp N6   &trans   &trans     &kp F10
  &trans   &trans     &trans       &trans     &trans   &trans       &kp N1   &kp N2  &kp N3   &trans   &trans     &kp F20
                      &trans       &trans     &trans                &lt 3 BACKSPACE  &kp LSHFT
            >;
        };

        SYMNUM {
            bindings = <
  &trans   &kp EXCL       &kp AT        &kp HASH     &kp DLLR    &kp PRCNT       &kp CARET   &kp AMPS    &kp KP_MULTIPLY   &kp LPAR   &kp RPAR   &kp DEL
  &trans   &bt BT_CLR     &bt BT_PRV    &bt BT_NXT   &trans      &trans          &kp UNDER   &kp EQUAL   &kp LBKT          &kp RBKT   &kp BSLH   &kp GRAVE
  &trans   &out OUT_TOG   &bootloader   &trans       &trans      &trans          &kp MINUS   &kp PLUS    &kp LBRC          &kp RBRC   &kp PIPE   &kp TILDE
                          &trans        &trans       &lt 3 TAB                   &trans      &trans
            >;
        };

        FUN {
            bindings = <
  &trans   &trans   &kp F1  &kp F2   &kp F3   &kp F4       &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4   &bt BT_CLR
  &trans   &trans   &kp F5  &kp F6   &kp F7   &kp F8       &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE     &trans
  &trans   &trans   &kp F9  &kp F10  &kp F11  &kp F12      &trans        &trans            &trans             &trans           &trans         &to 0
                    &trans  &trans  &trans                 &trans        &trans
            >;
        };

        SCROLL {
            bindings = <
  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans            &trans  &trans
            >;
        };
    };
};
